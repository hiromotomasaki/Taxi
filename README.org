* 開発環境
#+BEGIN_SRC sh
[19:21:47]hiro@hiro-VirtualBox:~$ cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=16.04
DISTRIB_CODENAME=xenial
DISTRIB_DESCRIPTION="Ubuntu 16.04.1 LTS"
#+END_SRC

* g++のversion
#+BEGIN_SRC sh
[19:21:49]hiro@hiro-VirtualBox:~$ g++ --version
g++ (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#+END_SRC

* 大阪について

* 和歌山について
** 仕様
- ピンの色は一色
- ピンを押した時の行き先表示の赤い線はいらない
- コントロールパネルでタクシーのオブジェクトの(表示 / 非表示)の制御をできるようにする
- ニューラルネットワークによる需要予測の結果から需要が集中しているセルを丸で示す
- 需要が集中しているセルをオブジェクトで示す
- 需要が集中している場所（横5セル分の大きさ）の中心セルをサークルで示す.サークルは大きいので他のサークルと重なることがある．そこで，以下のようにしてサークルの数を減らす．まず，生成したサークルを需要数が大きい順に並べる．次に需要数が多い順にサークルを残すか残さないか判別していく．判別の基準は予め定めておいたセルの集合の中ですでにサークルの描画が決まっているものがあるかどうかである．
- 需要が集中していて空車のタクシーがいない場所をオブジェクトで示す．これは単純に（需要 - 空車の台数）を計算して，これを需要と思いオブジェクトの生成をすれば良い．
** hiromotoが書くもの
最大3台のサーバーで分散して計算できるようにプログラムを分割する．
ただし，運用前のテストにおいてデータ領域を少なくするために共通する関数やデータは，このディレクトリーと同じ所においてシンボリックリンクを貼ることにする．
合理的なオブジェクトの生成方法が貪欲なオブジェクトの生成方法とほぼ同じなので．MakeObjectのところで一緒に処理をすることにした．MakeObjectにクライアントの要求ごとに実行するプログラムがまとまっていることになる．PredictionとMakeCircleはcronごとに実行するだけで，クライアントの要求ごとに実行する必要はない．
*** Prediction（丸）
ニューラルネットワーク
*** MakeObject（2つのオブジェクト）
需要が集中するセルをオブジェクトで示す.

(需要-空車)を需要と思い，それが集中するセルをオブジェクトで示す．
*** MakeCircle（丸）
需要が集中する場所を丸で示す
